// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ACDServiceClient is the client API for ACDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ACDServiceClient interface {
	AgentState(ctx context.Context, in *RequestAgentState, opts ...grpc.CallOption) (*ResponseAgentState, error)
}

type aCDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewACDServiceClient(cc grpc.ClientConnInterface) ACDServiceClient {
	return &aCDServiceClient{cc}
}

func (c *aCDServiceClient) AgentState(ctx context.Context, in *RequestAgentState, opts ...grpc.CallOption) (*ResponseAgentState, error) {
	out := new(ResponseAgentState)
	err := c.cc.Invoke(ctx, "/pb.ACDService/AgentState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACDServiceServer is the server API for ACDService service.
// All implementations must embed UnimplementedACDServiceServer
// for forward compatibility
type ACDServiceServer interface {
	AgentState(context.Context, *RequestAgentState) (*ResponseAgentState, error)
	mustEmbedUnimplementedACDServiceServer()
}

// UnimplementedACDServiceServer must be embedded to have forward compatible implementations.
type UnimplementedACDServiceServer struct {
}

func (UnimplementedACDServiceServer) AgentState(context.Context, *RequestAgentState) (*ResponseAgentState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentState not implemented")
}
func (UnimplementedACDServiceServer) mustEmbedUnimplementedACDServiceServer() {}

// UnsafeACDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ACDServiceServer will
// result in compilation errors.
type UnsafeACDServiceServer interface {
	mustEmbedUnimplementedACDServiceServer()
}

func RegisterACDServiceServer(s grpc.ServiceRegistrar, srv ACDServiceServer) {
	s.RegisterService(&ACDService_ServiceDesc, srv)
}

func _ACDService_AgentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAgentState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACDServiceServer).AgentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ACDService/AgentState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACDServiceServer).AgentState(ctx, req.(*RequestAgentState))
	}
	return interceptor(ctx, in, info, handler)
}

// ACDService_ServiceDesc is the grpc.ServiceDesc for ACDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ACDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ACDService",
	HandlerType: (*ACDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgentState",
			Handler:    _ACDService_AgentState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acd.proto",
}
